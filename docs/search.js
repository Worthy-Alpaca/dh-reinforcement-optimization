window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "type": "module", "doc": "<h1 id=\"dh-reinforcement-learning-smd-optimisation-tool\">D+H Reinforcement Learning SMD Optimisation Tool</h1>\n\n<p>This is the source code for the SMD Optimisation Tool. The entry point for the included interface is <code>src/interface.py</code>.</p>\n\n<p>The program is documented in html format, included in <code>docs</code> directory. The entry point here is <code>src.html</code>.</p>\n\n<p>The program is running on Python 3.10.6. All needed modules can be installed via the <code>requirements.txt</code> file.</p>\n\n<p>The program is compiled to EXE using <code>auto-py-to-exe</code>. The included <code>exegeneration.json</code> file can be used to recreate the process. To do so, you need to fix the input directories.</p>\n\n<p>Inno Setup Compiler was used to create an installer, using the included <code>d+h conversion.iss</code> file.</p>\n\n<p><em>Credit goes to unit8co for the base code.</em>\\\n<em>Modifications where made under the included GNU GENERAL PUBLIC LICENSE</em></p>\n"}, {"fullname": "src.helper", "modulename": "src.helper", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.helper.QFunction", "modulename": "src.helper", "qualname": "QFunction", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.helper.QFunction.__init__", "modulename": "src.helper", "qualname": "QFunction.__init__", "type": "function", "doc": "<p>Initiate the Q Function</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>model (nn.Module):</strong>  The current model instance.</li>\n<li><strong>optimizer (torch.optim):</strong>  The current optimizer instance.</li>\n<li><strong>lr_scheduler (FunctionType):</strong>  The current learning rate scheduler</li>\n<li><strong>loss_fn (torch.nn, optional):</strong>  The current loss function. Defaults to nn.HuberLoss.</li>\n<li><strong>device (torch.device or str, optional):</strong>  The current device. Defaults to torch.device(\"cpu\").</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;torch.optim&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">torch</span><span class=\"se\">\\\\</span><span class=\"s1\">optim</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">lr_scheduler</span><span class=\"p\">:</span> <span class=\"n\">function</span>,</span><span class=\"param\">\tloss_fn: &lt;module &#x27;torch.nn&#x27; from &#x27;C:\\\\Users\\\\stephan.schumacher\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\torch\\\\nn\\\\__init__.py&#x27;&gt; = &lt;class &#x27;torch.nn.modules.loss.HuberLoss&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "src.helper.QFunction.predict", "modulename": "src.helper", "qualname": "QFunction.predict", "type": "function", "doc": "<p>Method to predict a reward.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>state_tsr (torch.tensor):</strong>  The current state tensor.</li>\n<li><strong>W (torch.tensor):</strong>  The current distance matrix tensor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>torch.tensor: The predicted rewards tensor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state_tsr</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.QFunction.get_best_action", "modulename": "src.helper", "qualname": "QFunction.get_best_action", "type": "function", "doc": "<p>Method to get the current best action.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>state_tsr (torch.tensor):</strong>  The current state tensor.</li>\n<li><strong>state (State):</strong>  The current state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: index and estimated reward of best action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state_tsr</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.QFunction.batch_update", "modulename": "src.helper", "qualname": "QFunction.batch_update", "type": "function", "doc": "<p>Method to calculate the batch loss.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>states_tsrs (torch.tensor):</strong>  The current state tensor.</li>\n<li><strong>Ws (torch.tensor):</strong>  The current distance matrix tensor.</li>\n<li><strong>actions (torch.tensor):</strong>  The current batch actions.</li>\n<li><strong>targets (torch.tensor):</strong>  The current batch targets.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: The calculated batch loss.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">states_tsrs</span>, </span><span class=\"param\"><span class=\"n\">Ws</span>, </span><span class=\"param\"><span class=\"n\">actions</span>, </span><span class=\"param\"><span class=\"n\">targets</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.Memory", "modulename": "src.helper", "qualname": "Memory", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.helper.Memory.__init__", "modulename": "src.helper", "qualname": "Memory.__init__", "type": "function", "doc": "<p>Class that represents a memory.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>capacity (int, optional):</strong>  The memory capacity. Defaults to 10000.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">10000</span></span>)</span>"}, {"fullname": "src.helper.Memory.remember", "modulename": "src.helper", "qualname": "Memory.remember", "type": "function", "doc": "<p>Method to remember the current experience</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>experience (torch.tensor):</strong>  The current experience.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">experience</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.Memory.sample_batch", "modulename": "src.helper", "qualname": "Memory.sample_batch", "type": "function", "doc": "<p>Method to return a sample batch.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>batch_size (int):</strong>  The needed batch size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>torch.tensor: The created batch.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.UtilFunctions", "modulename": "src.helper", "qualname": "UtilFunctions", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.helper.UtilFunctions.__init__", "modulename": "src.helper", "qualname": "UtilFunctions.__init__", "type": "function", "doc": "<p>Initiate the utility function collection.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>coords (torch.tensor):</strong>  The current components.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">coords</span></span>)</span>"}, {"fullname": "src.helper.UtilFunctions.is_state_final", "modulename": "src.helper", "qualname": "UtilFunctions.is_state_final", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.UtilFunctions.calc_total_time", "modulename": "src.helper", "qualname": "UtilFunctions.calc_total_time", "type": "function", "doc": "<p>Calculates the total time for manufacturing and preparation.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>solution (list):</strong>  The final solution list.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: The calculated total time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solution</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.UtilFunctions.total_distance", "modulename": "src.helper", "qualname": "UtilFunctions.total_distance", "type": "function", "doc": "<p>Method to calculate the total distance of a given solution.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>solution (list):</strong>  The current solution.</li>\n<li><strong>W (torch.tensor):</strong>  The current distance matrix tensor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: calculated distance, solution</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solution</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">W</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.UtilFunctions.get_next_neighbor_random", "modulename": "src.helper", "qualname": "UtilFunctions.get_next_neighbor_random", "type": "function", "doc": "<p>Method to get a random action for a given state (explore).</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>state (State):</strong>  The current state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The random index of a all available nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.Cartsetup", "modulename": "src.helper", "qualname": "Cartsetup", "type": "function", "doc": "<p>Function to calculate setup time for a given list of components.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>comps (list):</strong>  The current component list.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: The calculated time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">comps</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.helper.Coating", "modulename": "src.helper", "qualname": "Coating", "type": "function", "doc": "<p>simulates the time for coating a PCB.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>Ymax (int):</strong>  The maximum y value on a given PCB.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: The calculated time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Ymax</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.helper.TextRedirector", "modulename": "src.helper", "qualname": "TextRedirector", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.helper.TextRedirector.__init__", "modulename": "src.helper", "qualname": "TextRedirector.__init__", "type": "function", "doc": "<p>Class to redirect a console interaction to a given TKinter widget.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>widget (tk.widget):</strong>  The widget which should display the console interaction</li>\n<li><strong>tag (str, optional):</strong>  The given tag. Defaults to \"stdout\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"s1\">&#39;stdout&#39;</span></span>)</span>"}, {"fullname": "src.helper.TextRedirector.write", "modulename": "src.helper", "qualname": "TextRedirector.write", "type": "function", "doc": "<p>Method to write to the widget.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>str (str):</strong>  The string to be displayed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.interface", "modulename": "src.interface", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.interface.Interface", "modulename": "src.interface", "qualname": "Interface", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.interface.Interface.__init__", "modulename": "src.interface", "qualname": "Interface.__init__", "type": "function", "doc": "<p>Creates the interface and it's child modules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "src.interface.Interface.resource_path", "modulename": "src.interface", "qualname": "Interface.resource_path", "type": "function", "doc": "<p>Method used for ressources when compiled into EXE.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>relative_path (str):</strong>  The current relative path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The path to the ressource.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relative_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.interface.Interface.run", "modulename": "src.interface", "qualname": "Interface.run", "type": "function", "doc": "<p>Call this to initate the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.main", "modulename": "src.main", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.main.RunModel", "modulename": "src.main", "qualname": "RunModel", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.main.RunModel.__init__", "modulename": "src.main", "qualname": "RunModel.__init__", "type": "function", "doc": "<p>Initiate the reinforcement learning model and training or prediction capabilities.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dbpath (str):</strong>  Path to current data source.</li>\n<li><strong>numSamples (int, optional):</strong>  Number of samples to train with. Defaults to 10.</li>\n<li><strong>tuning (bool, optional):</strong>  If the Model is running in tuning Mode. Deletes saved models in next tuning iteration. Defaults to False.</li>\n<li><strong>allowDuplicates (bool, optional):</strong>  If duplicates should be allowed during training. Defaults to False.</li>\n<li><strong>overwriteDevice (_type_, optional):</strong>  The device on which to initiate all torch instances. Defaults to False.</li>\n<li><strong>caching (bool, optional):</strong>  If caching should be used. Defaults to True.</li>\n<li><strong>disableProgress (bool, optional):</strong>  If the progress bar should be hidden. Defaults to False.</li>\n<li><strong>refEngine (engine, optional):</strong>  SQL engine to reference data. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError:</strong>  If cached data can't be found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dbpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">numSamples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">tuning</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">allowDuplicates</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">overwriteDevice</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cuda:0&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">caching</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">disableProgress</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">refEngine</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;sqlalchemy.engine&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">sqlalchemy</span><span class=\"se\">\\\\</span><span class=\"s1\">engine</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.main.RunModel.init_model", "modulename": "src.main", "qualname": "RunModel.init_model", "type": "function", "doc": "<p>Initiate the model state loading. If no <code>fname</code> is given, a new model will be initialized.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>fname (str, optional):</strong>  Path to a saved state_dict. Defaults to None.</li>\n<li><strong>EMBEDDING_DIMENSIONS (int, optional):</strong>  Embedding dimensions in the model. Defaults to 10.</li>\n<li><strong>EMBEDDING_ITERATIONS_T (int, optional):</strong>  Embedding iterations in the model. Defaults to 2.</li>\n<li><strong>INIT_LR (float, optional):</strong>  Initial learning rate. Changes over time. Defaults to 3e-3.</li>\n<li><strong>OPTIMIZER (FunctionType, optional):</strong>  The Optimizer to use. Defaults to torch.optim.Adam.</li>\n<li><strong>optim_args (dict, optional):</strong>  Optional keyword arguments for optimizer instance. Defaults to {}.</li>\n<li><strong>loss_func (FunctionType, optional):</strong>  The loss function to use. Defaults to torch.nn.MSELoss.</li>\n<li><strong>LR_DECAY_RATE (float, optional):</strong>  The decay rate of the initial learning rate. Defaults to 1.0-2e-5.</li>\n<li><strong>debug (bool, optional):</strong>  If debug information should be displayed. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: Q Function, Q Networ, optimizer, learning rate scheduler</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">EMBEDDING_DIMENSIONS</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">EMBEDDING_ITERATIONS_T</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">INIT_LR</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.003</span>,</span><span class=\"param\">\tOPTIMIZER: function = &lt;class &#x27;torch.optim.adam.Adam&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">optim_args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\tloss_func: function = &lt;class &#x27;torch.nn.modules.loss.MSELoss&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">LR_DECAY_RATE</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.99998</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.checkpoint_model", "modulename": "src.main", "qualname": "RunModel.checkpoint_model", "type": "function", "doc": "<p>Method to checkpoint the model.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>model (torch.nn.Module):</strong>  The current model.</li>\n<li><strong>optimizer (torch.optim):</strong>  The current optimizer.</li>\n<li><strong>lr_scheduler (torch.optim):</strong>  the current learning rate scheduler.</li>\n<li><strong>loss (float):</strong>  The current loss.</li>\n<li><strong>episode (int):</strong>  The current episode.</li>\n<li><strong>avg_length (float):</strong>  The current average length.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;torch.optim&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">torch</span><span class=\"se\">\\\\</span><span class=\"s1\">optim</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">lr_scheduler</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;torch.optim&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">torch</span><span class=\"se\">\\\\</span><span class=\"s1\">optim</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">episode</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">avg_length</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.state2tens", "modulename": "src.main", "qualname": "RunModel.state2tens", "type": "function", "doc": "<p>Method to convert a given state into PyTorch tensor.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>state (NamedTuple):</strong>  The current state.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>torch.tensor: The created tensor.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">NamedTuple</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x00007FFFA2EFBF30</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.getRandomSample", "modulename": "src.main", "qualname": "RunModel.getRandomSample", "type": "function", "doc": "<p>Method to retrieve a random sample based on the given size.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>size (int):</strong>  The size needed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: The generated sample.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">notAllowed</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.get_duplicates", "modulename": "src.main", "qualname": "RunModel.get_duplicates", "type": "function", "doc": "<p>Method to retrieve duplicates in given iterable.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>iterable (list):</strong>  Iterable to be searched for duplicates</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: found duplicates, their occurance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.getData", "modulename": "src.main", "qualname": "RunModel.getData", "type": "function", "doc": "<p>Method to generate a data sample from a given sample list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>samples (list, optional):</strong>  The current sample. Defaults to False.</li>\n<li><strong>sampleReqsList (list, optional):</strong>  The current sample requirements. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">sampleReqsList</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.generateData", "modulename": "src.main", "qualname": "RunModel.generateData", "type": "function", "doc": "<p>Method used to generate all needed training data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: All datapoints as dict, their components</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.fit", "modulename": "src.main", "qualname": "RunModel.fit", "type": "function", "doc": "<p>Train the current model.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>Q_func (FunctionType):</strong>  The current Q_function</li>\n<li><strong>Q_net (nn.Module):</strong>  The current model.</li>\n<li><strong>optimizer (FunctionType):</strong>  The current optimizer function.</li>\n<li><strong>lr_scheduler (FunctionType):</strong>  The current learning rate scheduler.</li>\n<li><strong>NR_EPISODES (int):</strong>  The number of training iterations.</li>\n<li><strong>MIN_EPSILON (float):</strong>  The minimum epsilon value.</li>\n<li><strong>EPSILON_DECAY_RATE (float):</strong>  The current epsilon decay rate.</li>\n<li><strong>N_STEP_QL (int):</strong>  Placeholder</li>\n<li><strong>BATCH_SIZE (int):</strong>  The current batch size.</li>\n<li><strong>GAMMA (float):</strong>  The current gamma value.</li>\n<li><strong>trial (optuna.trial.Trial):</strong>  The current trial in tuning. Defaults to None.</li>\n<li><strong>debug (bool):</strong>  If debug information should be displayed. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: The median loss value for the training.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Q_func</span><span class=\"p\">:</span> <span class=\"n\">function</span>,</span><span class=\"param\">\t<span class=\"n\">Q_net</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"n\">function</span>,</span><span class=\"param\">\t<span class=\"n\">lr_scheduler</span><span class=\"p\">:</span> <span class=\"n\">function</span>,</span><span class=\"param\">\t<span class=\"n\">NR_EPISODES</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">MIN_EPSILON</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">EPSILON_DECAY_RATE</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">N_STEP_QL</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">BATCH_SIZE</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">GAMMA</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">trial</span><span class=\"p\">:</span> <span class=\"n\">optuna</span><span class=\"o\">.</span><span class=\"n\">trial</span><span class=\"o\">.</span><span class=\"n\">_trial</span><span class=\"o\">.</span><span class=\"n\">Trial</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.plotMetrics", "modulename": "src.main", "qualname": "RunModel.plotMetrics", "type": "function", "doc": "<p>Method to plot and visualize saved metrics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.getBestOder", "modulename": "src.main", "qualname": "RunModel.getBestOder", "type": "function", "doc": "<p>Method to get the best order in a given sample list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>samples (list, optional):</strong>  The current sample list. Defaults to False.</li>\n<li><strong>debug (bool, optional):</strong>  If debug information should be displayed. Defaults to False.</li>\n<li><strong>numCarts (int, optional):</strong>  Number of carts to use for group calculations. Defaults to 6.</li>\n<li><strong>sampleReqs (list, optional):</strong>  List of sample requirements. Defaults to False.</li>\n<li><strong>modelFolder (Path, optional):</strong>  Path to the best saved model. Defaults to \"\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: The calculated best value and the calculted best solution dict.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">samples</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">numCarts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">sampleReqs</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">modelFolder</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.main.RunModel.resource_path", "modulename": "src.main", "qualname": "RunModel.resource_path", "type": "function", "doc": "<p>Method used for ressources when compiled into EXE.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>relative_path (str):</strong>  The current relative path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The path to the ressource.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">relative_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.misc", "modulename": "src.misc", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.misc.dataloader", "modulename": "src.misc.dataloader", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.misc.dataloader.DataBaseLoader", "modulename": "src.misc.dataloader", "qualname": "DataBaseLoader", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.misc.dataloader.DataBaseLoader.__init__", "modulename": "src.misc.dataloader", "qualname": "DataBaseLoader.__init__", "type": "function", "doc": "<p>Class to load data from a txt file.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>pathToProductTxT (Path):</strong>  The path to the data source.</li>\n<li><strong>refEngine (engine, optional):</strong>  SQL Engine for reference data. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pathToProductTxT</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">refEngine</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;sqlalchemy.engine&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">sqlalchemy</span><span class=\"se\">\\\\</span><span class=\"s1\">engine</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.misc.dataloader.DataBaseLoader.getProductData", "modulename": "src.misc.dataloader", "qualname": "DataBaseLoader.getProductData", "type": "function", "doc": "<p>Method to retrieve only the components for a given product ID.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>product (str):</strong>  The current product ID.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: The retrieved components.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">product</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.misc.dataloader.KappaLoader", "modulename": "src.misc.dataloader", "qualname": "KappaLoader", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.misc.dataloader.KappaLoader.__init__", "modulename": "src.misc.dataloader", "qualname": "KappaLoader.__init__", "type": "function", "doc": "<p>Class to load all needed data from an exported SAP excel list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (Path):</strong>  Path to the excel spreadsheet.</li>\n<li><strong>dbpath (str):</strong>  Path to the data source.</li>\n<li><strong>startDate (str, optional):</strong>  The given start date. Defaults to None.</li>\n<li><strong>endDate (str, optional):</strong>  The given end date. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">dbpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">startDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">endDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.misc.dataloader.KappaLoader.getData", "modulename": "src.misc.dataloader", "qualname": "KappaLoader.getData", "type": "function", "doc": "<p>Method to return all needed data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple: Sample list, requirements list, short text array.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.misc.dataset", "modulename": "src.misc.dataset", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.misc.dataset.ProductDataset", "modulename": "src.misc.dataset", "qualname": "ProductDataset", "type": "class", "doc": "<p>An abstract class representing a <code>Dataset</code>.</p>\n\n<p>All datasets that represent a map from keys to data samples should subclass\nit. All subclasses should overwrite <code>__getitem__</code>, supporting fetching a\ndata sample for a given key. Subclasses could also optionally overwrite\n<code>__len__</code>, which is expected to return the size of the dataset by many\n<code>~torch.utils.data.Sampler</code> implementations and the default options\nof <code>~torch.utils.data.DataLoader</code>.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p><code>~torch.utils.data.DataLoader</code> by default constructs a index\nsampler that yields integral indices.  To make it work with a map-style\ndataset with non-integral indices/keys, a custom sampler must be provided.</p>\n\n</div>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "src.misc.dataset.ProductDataset.__init__", "modulename": "src.misc.dataset", "qualname": "ProductDataset.__init__", "type": "function", "doc": "<p>Class that contains all data used for model training.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (np.ndarray):</strong>  The data points.</li>\n<li><strong>clist (np.ndarray):</strong>  The corresponding component arrays.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">clist</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "src.misc.dataset.ProductDataloader", "modulename": "src.misc.dataset", "qualname": "ProductDataloader", "type": "class", "doc": "<p>Class to load the data.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "src.misc.deploy", "modulename": "src.misc.deploy", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.misc.deploy.DeplotmentException", "modulename": "src.misc.deploy", "qualname": "DeplotmentException", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "src.misc.deploy.DeployModel", "modulename": "src.misc.deploy", "qualname": "DeployModel", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.misc.deploy.DeployModel.__init__", "modulename": "src.misc.deploy", "qualname": "DeployModel.__init__", "type": "function", "doc": "<p>Initiate the deployment of the Neural Network.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (Path):</strong>  Path to the saved NN Parameters.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>DeplotmentException:</strong>  If the Save Folder doesn't exist.</li>\n<li><strong>DeplotmentException:</strong>  If something in the Model Loading process went wrong. Will notify of the error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span>)</span>"}, {"fullname": "src.misc.deploy.DeployModel.predict", "modulename": "src.misc.deploy", "qualname": "DeployModel.predict", "type": "function", "doc": "<p>Method to predict with the loaded Neural Network.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (np.ndarray):</strong>  The Data needed for the prediction.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>np.ndarray: The predicted value(s).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.model", "modulename": "src.model", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.model.QNetModel", "modulename": "src.model", "qualname": "QNetModel", "type": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to</code>, etc.</p>\n\n<div class=\"pdoc-alert pdoc-alert-note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "src.model.QNetModel.__init__", "modulename": "src.model", "qualname": "QNetModel.__init__", "type": "function", "doc": "<p>Creates a child of nn.Module as the neural network.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>emb_dim (int):</strong>  Number of embedding dimensions.</li>\n<li><strong>emb_it (int, optional):</strong>  Number of embedding iterations. Defaults to 4.</li>\n<li><strong>device (torch.device or str, optional):</strong>  The device on which to initiate tensors and layers. Defaults to torch.device(\"cpu\").</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">emb_dim</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">emb_it</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "src.model.QNetModel.forward", "modulename": "src.model", "qualname": "QNetModel.forward", "type": "function", "doc": "<p>Forward pass of the neural network.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>xv (torch.tensor):</strong>  The current Q Table.</li>\n<li><strong>Ws (torch.tensor):</strong>  Distance Matrix for all Nodes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>torch.tensor: The calculated distances for all other nodes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">xv</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">Ws</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.modules", "modulename": "src.modules", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.controller", "modulename": "src.modules.controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.controller.controller", "modulename": "src.modules.controller.controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.controller.controller.Controller", "modulename": "src.modules.controller.controller", "qualname": "Controller", "type": "class", "doc": "<p>Draws PCB on canvas</p>\n", "bases": "src.modules.parent.canvas.MyCanvas"}, {"fullname": "src.modules.controller.controller.Controller.__init__", "modulename": "src.modules.controller.controller", "qualname": "Controller.__init__", "type": "function", "doc": "<p>Construct a canvas widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, closeenough,\nconfine, cursor, height, highlightbackground, highlightcolor,\nhighlightthickness, insertbackground, insertborderwidth,\ninsertofftime, insertontime, insertwidth, offset, relief,\nscrollregion, selectbackground, selectborderwidth, selectforeground,\nstate, takefocus, width, xscrollcommand, xscrollincrement,\nyscrollcommand, yscrollincrement.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span></span>)</span>"}, {"fullname": "src.modules.controller.controller.Controller.wait", "modulename": "src.modules.controller.controller", "qualname": "Controller.wait", "type": "function", "doc": "<p>Function that displays a loading screen.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>message (str, optional):</strong>  The message to be displayed along side the loading screen. Defaults to \"\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>any: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.modules.controller.controller.Controller.error", "modulename": "src.modules.controller.controller", "qualname": "Controller.error", "type": "function", "doc": "<p>Function that displays an error message.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>error (str):</strong>  The current error message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.modules.parent", "modulename": "src.modules.parent", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.parent.canvas", "modulename": "src.modules.parent.canvas", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.parent.canvas.MyCanvas", "modulename": "src.modules.parent.canvas", "qualname": "MyCanvas", "type": "class", "doc": "<p>Canvas widget to display graphical elements like lines or text.</p>\n", "bases": "tkinter.Canvas"}, {"fullname": "src.modules.parent.canvas.MyCanvas.__init__", "modulename": "src.modules.parent.canvas", "qualname": "MyCanvas.__init__", "type": "function", "doc": "<p>Construct a canvas widget with the parent MASTER.</p>\n\n<p>Valid resource names: background, bd, bg, borderwidth, closeenough,\nconfine, cursor, height, highlightbackground, highlightcolor,\nhighlightthickness, insertbackground, insertborderwidth,\ninsertofftime, insertontime, insertwidth, offset, relief,\nscrollregion, selectbackground, selectborderwidth, selectforeground,\nstate, takefocus, width, xscrollcommand, xscrollincrement,\nyscrollcommand, yscrollincrement.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">master</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.modules.parent.menubar", "modulename": "src.modules.parent.menubar", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.modules.parent.menubar.Titlebar", "modulename": "src.modules.parent.menubar", "qualname": "Titlebar", "type": "function", "doc": "<p>Creates a titlebar and basic window functions</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>root (master):</strong>  Root window for titlebar</li>\n<li><strong>main_frame (master):</strong>  Main frame of window</li>\n<li><strong>icon (PhotoImage):</strong>  Tkinter PhotoImage for icon</li>\n<li><strong>title_text (str):</strong>  Text to display in titlebar</li>\n<li><strong>minimize (bool):</strong>  Should a minimize button be created?</li>\n<li><strong>maximize (bool):</strong>  Should a maximize button be created?</li>\n<li><strong>close (bool):</strong>  Should a close button be created?</li>\n<li><strong>min_width (int):</strong>  Minimum width of titlebar</li>\n<li><strong>min_height (int):</strong>  Minimum height of titlebar</li>\n<li><strong>closeCommand (FunctionType):</strong>  Function to execute on close</li>\n<li><strong>isToplevel (bool):</strong>  If this titlebar is used in a toplevel. Defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">root</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Tk</span>,</span><span class=\"param\">\t<span class=\"n\">main_frame</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">ttk</span><span class=\"o\">.</span><span class=\"n\">Frame</span>,</span><span class=\"param\">\t<span class=\"n\">icon</span><span class=\"p\">:</span> <span class=\"n\">tkinter</span><span class=\"o\">.</span><span class=\"n\">Image</span>,</span><span class=\"param\">\t<span class=\"n\">title_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">minimize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">maximize</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">close</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">min_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">min_height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">closeCommand</span><span class=\"p\">:</span> <span class=\"n\">function</span>,</span><span class=\"param\">\t<span class=\"n\">isToplevel</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.modules.parent.menubar.Menubar", "modulename": "src.modules.parent.menubar", "qualname": "Menubar", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.modules.parent.menubar.Menubar.__init__", "modulename": "src.modules.parent.menubar", "qualname": "Menubar.__init__", "type": "function", "doc": "<p>Menubar class creates a frame for the menubar which is accessed in the Menu class</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>root (master):</strong>  Root window for Menubar.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">root</span></span>)</span>"}, {"fullname": "src.modules.parent.menubar.MenuCustom", "modulename": "src.modules.parent.menubar", "qualname": "MenuCustom", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.modules.parent.menubar.MenuCustom.__init__", "modulename": "src.modules.parent.menubar", "qualname": "MenuCustom.__init__", "type": "function", "doc": "<p>Adds a menubutton to the menubar frame with the text header and allows for the menu to be populated with commands and separators</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>menubar:</strong>  Root menubar.</li>\n<li><strong>header:</strong>  Name of the menubar.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">menubar</span>, </span><span class=\"param\"><span class=\"n\">header</span></span>)</span>"}, {"fullname": "src.modules.parent.menubar.MenuCustom.add_command", "modulename": "src.modules.parent.menubar", "qualname": "MenuCustom.add_command", "type": "function", "doc": "<p>Add a command to the created menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.modules.parent.menubar.MenuCustom.add_checkbutton", "modulename": "src.modules.parent.menubar", "qualname": "MenuCustom.add_checkbutton", "type": "function", "doc": "<p>Add a checkbutton to the created menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span>, </span><span class=\"param\"><span class=\"n\">var</span>, </span><span class=\"param\"><span class=\"n\">command</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.modules.parent.menubar.MenuCustom.add_separator", "modulename": "src.modules.parent.menubar", "qualname": "MenuCustom.add_separator", "type": "function", "doc": "<p>Add a separator to the created menu.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tuner", "modulename": "src.tuner", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.tuner.Tuner", "modulename": "src.tuner", "qualname": "Tuner", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.tuner.Tuner.__init__", "modulename": "src.tuner", "qualname": "Tuner.__init__", "type": "function", "doc": "<p>Class to initiate a Model tuning session.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>direction (Literal[&quot;minimize&quot;, &quot;maximize&quot;], optional):</strong>  Direction to optimize. &quot;minimize&quot; optimizes Loss,  &quot;maximize&quot; optimizes Accuracy. Defaults to \"maximize\".</li>\n<li><strong>sampler (optuna.samplers, optional):</strong>  Optuna Sampler Algorythm to use. Defaults to optuna.samplers.TPESampler.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>optuna.study: Optuna Study like session.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;minimize&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;maximize&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;maximize&#39;</span>,</span><span class=\"param\">\tsampler: &lt;module &#x27;optuna.samplers&#x27; from &#x27;C:\\\\Users\\\\stephan.schumacher\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python310\\\\lib\\\\site-packages\\\\optuna\\\\samplers\\\\__init__.py&#x27;&gt; = &lt;class &#x27;optuna.samplers._tpe.sampler.TPESampler&#x27;&gt;</span>)</span>"}, {"fullname": "src.tuner.Tuner.optimize", "modulename": "src.tuner", "qualname": "Tuner.optimize", "type": "function", "doc": "<p>Starts the optimization process.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>n_trials (int):</strong>  Number of trials to run.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>optuna.trial.FrozenTrial: The best trial according to optimizer.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_trials</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">optuna</span><span class=\"o\">.</span><span class=\"n\">trial</span><span class=\"o\">.</span><span class=\"n\">_frozen</span><span class=\"o\">.</span><span class=\"n\">FrozenTrial</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.tuner.Tuner.tuneModel", "modulename": "src.tuner", "qualname": "Tuner.tuneModel", "type": "function", "doc": "<p>Tunes the model accoring to objective parameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>params (dict):</strong>  Paramters generated by Objective.</li>\n<li><strong>trial (optuna.trial):</strong>  Current optuna trial. Defaults to None.</li>\n<li><strong>saveState (bool):</strong>  If the parameters should be saved to file. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[torch.tensor  float, torch.Tensor  float]: Mean Loss and Accuracy for validation.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">trial</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;optuna.trial&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">stephan.schumacher</span><span class=\"se\">\\\\</span><span class=\"s1\">AppData</span><span class=\"se\">\\\\</span><span class=\"s1\">Local</span><span class=\"se\">\\\\</span><span class=\"s1\">Programs</span><span class=\"se\">\\\\</span><span class=\"s1\">Python</span><span class=\"se\">\\\\</span><span class=\"s1\">Python310</span><span class=\"se\">\\\\</span><span class=\"s1\">lib</span><span class=\"se\">\\\\</span><span class=\"s1\">site-packages</span><span class=\"se\">\\\\</span><span class=\"s1\">optuna</span><span class=\"se\">\\\\</span><span class=\"s1\">trial</span><span class=\"se\">\\\\</span><span class=\"s1\">__init__.py&#39;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">saveState</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">method</span> <span class=\"n\">tensor</span> <span class=\"n\">of</span> <span class=\"nb\">type</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x00007FFFA2EFBF30</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.tuner.Tuner.saveBestTrial", "modulename": "src.tuner", "qualname": "Tuner.saveBestTrial", "type": "function", "doc": "<p>Save the state and Parameters of the best trial.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>params (optuna.trial.FrozenTrial):</strong>  The best trial as determined by optuna</li>\n<li><strong>path (Path, optional):</strong>  Path to saving location. Defaults to PATH.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"n\">WindowsPath</span><span class=\"p\">(</span><span class=\"s1\">&#39;C:/Users/stephan.schumacher/Documents/repos/dh-reinforcement-optimization/data/models&#39;</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tuner.Tuner.saveStudy", "modulename": "src.tuner", "qualname": "Tuner.saveStudy", "type": "function", "doc": "<p>Saves the study to the provided path.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (Path):</strong>  Path to saving location.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.tuner.Tuner.loadStudy", "modulename": "src.tuner", "qualname": "Tuner.loadStudy", "type": "function", "doc": "<p>Load a study from the provided location.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (Path):</strong>  The location of the study.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>optuna.study.Study: The loaded study.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">optuna</span><span class=\"o\">.</span><span class=\"n\">study</span><span class=\"o\">.</span><span class=\"n\">study</span><span class=\"o\">.</span><span class=\"n\">Study</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.validate", "modulename": "src.validate", "type": "module", "doc": "<p></p>\n"}, {"fullname": "src.validate.Validate", "modulename": "src.validate", "qualname": "Validate", "type": "class", "doc": "<p></p>\n"}, {"fullname": "src.validate.Validate.__init__", "modulename": "src.validate", "qualname": "Validate.__init__", "type": "function", "doc": "<p>Class for visualising and comparing solutions.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>best_value (float):</strong>  Current best value by model.</li>\n<li><strong>best_solution (list):</strong>  Current best solution by model.</li>\n<li><strong>dbpath (str):</strong>  Path to database.</li>\n<li><strong>calcGroups (bool, optional):</strong>  If groups should be calculated. Defaults to False.</li>\n<li><strong>overlapThreshhold (float, optional):</strong>  Threshhold for group calculations. Defaults to 0.5.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">best_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">best_solution</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">dbpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">calcGroups</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">overlapThreshhold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span></span>)</span>"}, {"fullname": "src.validate.Validate.plotSoltions", "modulename": "src.validate", "qualname": "Validate.plotSoltions", "type": "function", "doc": "<p>Plot the current solution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();